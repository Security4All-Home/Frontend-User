// Pre change colors
//$navbar-background-color: rgb(10, 31, 60) !important;
$navbar-item-hover-color: rgb(10, 31, 60) !important;
$navbar-item-hover-background-color: rgba(13, 52, 107, 0) !important;
// $navbar-dropdown-background-color:#0A1F3C !important;
$navbar-dropdown-item-hover-background-color:rgba(13, 52, 107, 0.349) !important;
// $navbar-divider-background-color:#FFBF2F !important;
$navbar-dropdown-arrow: #ffffff !important;
$progress-value-background-color: #FFBF2F !important;
$table-row-active-background-color: #0A1F3C !important;
$progress-text-color: #0A1F3C !important;
/*$table-background-color: #0A1F3C !important;
$table-color: #f2f2f2 !important;
$table-row-hover-background-color: #FFBF2F !important;*/
$table-color: #0A1F3C !important;
$table-head-cell-color: #0A1F3C !important;
$table-head-cell-color: #0A1F3C !important;
$table-row-hover-background-color: #FFBF2F !important;
$table-row-hover-color: #f2f2f2 !important;

// Import Bulma's core
@import "~bulma/sass/utilities/_all";

// Import Bulma and Buefy styles
@import "~bulma/bulma";
@import "~buefy/src/scss/buefy";



// Colors
$primary: #FFBF2F;
$primary-invert: findColorInvert($primary);
$secondary: #0A1F3C;
$secondary-invert: findColorInvert($primary);
$ourWhite: #F2F2F2;
$ourWhite-invert: findColorInvert($primary);
$ourGrey: #6D6D73;
$ourGrey-invert: findColorInvert($primary);

$dark: #373737;
$dark-invert: findColorInvert($dark);
$danger: #FF1053;
$danger-invert: findColorInvert($danger);
$white: #FFF;
$white-invert: findColorInvert($white);
$light: #F8F9FA;
$light-invert: findColorInvert($light);
$success: #27AE60;
$success-invert: findColorInvert($success);
$warning: #FFC107;
$warning-invert: findColorInvert($warning);

$facebook: #3B5998;
$google: #dd4b39;
$twitter: #1da1f2;
$youtube: #FF0000;
$linkedin: #4875B4;
$whatsapp: #25D366;
$reddit: #ff4500;

$colors: (
        "primary": ($primary, $primary-invert),
        "dark": ($dark, $dark-invert),
        "danger": ($danger, $danger-invert),
        "white": ($white, $white-invert),
        "success": ($success, $success-invert),
        "warning": ($warning, $warning-invert)
);

// Fonts
@import url('https://fonts.googleapis.com/css?family=Montserrat');
$family-serif: 'Montserrat', sans-serif;


// Style

.isPrimaryColor {
  color: $primary !important;
}

.isPrimaryBGColor {
  background-color: $primary !important;
}
.isSecondaryBGColor {
  background-color: $secondary !important;
}

.buttonBorderPrimary {
  background-color: transparent !important; //or rgba with a = 0
  border: 1px solid $primary !important;

  color: $primary !important;
}
.buttonBorderPrimary:hover {
  background-color: $primary !important;
  color: $secondary !important;
}

/////////////////////////////////////////////////
//GLITCH

@mixin glitchCopy { 
  content: attr(data-text);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.glitch {
position: relative;
color: white;
font-size: 4em;
letter-spacing: .5em;
/* Animation provies a slight random skew. Check bottom of doc
for more information on how to random skew. */
animation: glitch-skew 1s infinite linear alternate-reverse;

// Creates a copy before our text. 
&::before{
  // Duplicates our text with the mixin.
  @include glitchCopy;
  // Scoots text slightly to the left for the color offset.
  left: 2px;
  // Creates the color 'shadow' that happens on the glitch.
  text-shadow: -2px 0 #ff00c1;
  /* Creates an initial clip for our glitch. This works in
  a typical top,right,bottom,left fashion and creates a mask
  to only show a certain part of the glitch at a time. */
  clip: rect(44px, 450px, 56px, 0);
  /* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
  with an alternating animation to keep things fresh. */
  animation: glitch-anim 5s infinite linear alternate-reverse;
}

// Creates a copy after our text. Note comments from ::before.
&::after {
  @include glitchCopy;
  left: -2px;
  text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
  animation: glitch-anim2 1s infinite linear alternate-reverse;
}
}

/* Creates an animation with 20 steaps. For each step, it calculates 
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
$steps: 20;
@for $i from 0 through $steps {
#{percentage($i*(1/$steps))} {
clip: rect(random(100)+px, 9999px, random(100)+px, 0);
      transform: skew((random(100) / 100) + deg);
}
}
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
$steps: 20;
@for $i from 0 through $steps {
#{percentage($i*(1/$steps))} {
clip: rect(random(100)+px, 9999px, random(100)+px, 0);
      transform: skew((random(100) / 100) + deg);
}
}
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
$steps: 10;
@for $i from 0 through $steps {
#{percentage($i*(1/$steps))} {
transform: skew((random(10) - 5) + deg);
}
}
} 